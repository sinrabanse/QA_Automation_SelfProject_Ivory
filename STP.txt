Objective
The goal of this project is to evaluate and ensure the quality of several key features on the well-known Israeli e-commerce website Ivory.co.il.

Scope
This project will include automated tests written in JavaScript using the Playwright framework. Additionally, Python will be utilized for API testing and scripting, making test execution more efficient and versatile.

Plan and Approach

-Initially, the focus will be on writing automated tests for core functionalities such as navigating through the website, form validation, and the payment process.
-During the development process, new test scenarios will be identified and added as needed.
-Due to the lack of access to real testing accounts, payment processing, and the live database, mock systems will be implemented to simulate these components.
    -SQLite will be used to create a mock database.
    -A mock payment system will be designed to handle positive and negative payment scenarios.

Testing Tools

1. Playwright (JavaScript):
    -Used for writing and executing automated UI tests.
    -Allows simulation of user actions and verification of UI functionality.
2. Python:
    -Used for API testing.
    -Modules like requests for sending HTTP requests and pytest for efficient test execution.
3. SQLite:
    -A local database for storing mock data (e.g., orders, transactions).
    -Lightweight and easy to set up.
4. Mocking Tools:
    -Tools like json-server will be used to create local mock APIs, enabling simulation of API responses.
    -Allows testing functionality without real server dependencies.
5. GitHub:
    -For version control and project hosting.
    -Automating CI/CD pipelines via GitHub Actions.
6. Visual Studio Code:
    -Main code editor for development.
    -Supports extensions for Playwright and Python testing.

Test Environment
Browser Setup
    Tests will be executed in the following browsers:
        -Google Chrome.
        -Firefox.
        -Safari (webkit).
    Mobile device emulation:
        -Apple iPhone 15 (Safari).
        -Google Pixel 5 (Chrome).
Mock Server
    -Mock APIs will run locally using express+javascript.
    -Data, such as users and orders, will be stored in SQLite Database.
Database Setup
    -SQLite will replace the real database for testing purposes.
    -Database structure will include:
        -A users table.
        -An orders table.
        -A transactions table.
Execution Environment
    -Local Environment:
        -OS: macOS Sonoma.
        -Node.js: v23.2.0.
        -Python: 3.10+.
    -CI/CD:
        -GitHub Actions will trigger automated tests on every push.

Risks and Assumptions
Risks
1. Limited access to the live server:
    -Real payments and database operations cannot be tested.
    -Mitigation: Use mocks to simulate server responses.
2. Website updates:
    -Changes to the Ivory.co.il website might break existing tests.
    -Mitigation: Regularly update tests to match the latest website version.
3. Environment inconsistencies:
    -Tests may behave differently on various devices or browsers.
    -Mitigation: Test across multiple configurations (browsers, mobile devices).
4. Performance issues with mocks:
    -Mocking might slow down tests or produce unrealistic results.
    -Mitigation: Limit the complexity of mocked logic and focus on key scenarios.
5. Dependency on third-party libraries:
    -Libraries like Playwright and json-server might have updates that could affect tests.
    -Mitigation: Use specific versions of these libraries in the projectâ€™s package.json.
Assumptions
1. Mock data (users, orders, transactions) is realistic enough for testing purposes.
2. Integration with real payment systems is out of scope for this project.
3. Users input data in standard formats (e.g., credit card number without extra symbols).
4. The website will be available during testing.